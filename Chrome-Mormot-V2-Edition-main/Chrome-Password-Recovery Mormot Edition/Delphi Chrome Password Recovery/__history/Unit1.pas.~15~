unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, EncdDecd,
  netencoding, Vcl.Dialogs, Vcl.StdCtrls, sButton, sMemo,
  CWMIBase, COperatingSystemInfo, idglobal, ipwcore, ipwtypes,
  IdBaseComponent, IdCoder, IdCoder3to4, IdCoderMIME, CryptBase,
  ipccore, ipctypes, ipcaes, FireDAC.UI.Intf, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Phys, Vcl.ComCtrls, Data.DB, FireDAC.Comp.Client,
  FireDAC.Comp.DataSet, FireDAC.Comp.UI, FireDAC.Phys.SQLite, sbxcore,
  sbxtypes, sbxsymmetriccrypto, StrUtils, Winapi.Security.Cryptography,
  sSkinManager, System.ImageList, Vcl.ImgList, acAlphaImageList, sListView,
  AESObj, MiscObj, mormot.crypt.core, Chromium, System.JSON;

type
  TForm1 = class(TForm)
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FDQuery: TFDQuery;
    FDConnection: TFDConnection;
    ListView1: TListView;
    Button1: TButton;
    procedure FormResize(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    Original_Login_Data, New_Login_Data: String;
    Original_Local_State, New_Local_State: String;
    username: string;
    // Used to grab the username from Microsoft Windows Operating System...
  end;

const
  UNLEN = 256; // Maximum length of a user name

var
  Form1: TForm1;

implementation

type
  DATA_BLOB = record
    cbData: DWORD;
    pbData: PBYTE;
  end;

function CryptUnprotectData(pDataIn: PDATA_BLOB; ppszDataDescr: PPWideChar;
  pOptionalEntropy: PDATA_BLOB; pvReserved: Pointer; pPromptStruct: Pointer;
  dwFlags: DWORD; pDataOut: PDATA_BLOB): BOOL; stdcall; external 'Crypt32.dll';

{$R *.dfm}

function GetLoggedInUserName: string;
var
  Buffer: array [0 .. UNLEN + 1] of Char;
  Size: DWORD;
begin
  Size := Length(Buffer);
  if GetUserName(Buffer, Size) then
    Result := Buffer
  else
    Result := 'Unknown User';
end;

function dpApiUnprotectData(fpDataIn: TBytes): TBytes;
var
  DataIn, DataOut: DATA_BLOB;
begin
  DataOut.cbData := 0;
  DataOut.pbData := nil;

  DataIn.cbData := Length(fpDataIn);
  DataIn.pbData := @fpDataIn[0];

  if not CryptUnprotectData(@DataIn, nil, nil, nil, nil, 0, @DataOut) then
    RaiseLastOSError;

  SetLength(Result, DataOut.cbData);
  Move(DataOut.pbData^, Result[0], DataOut.cbData);
  LocalFree(HLOCAL(DataOut.pbData));
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  LI: TListItem;
  SL: TStringList;
  Data: TStringList;
  I: Integer;
begin
  // Clear ListView if necessary
  if ListView1.Items.Count > 0 then
    ListView1.Clear;

  SL := TStringList.Create;
  Data := TStringList.Create;
  try
    // Retrieve data from GetBrowser
    Data.Text := GetBrowser;

    // Split data based on the delimiter '|'
    SL.Delimiter := '|';
    SL.StrictDelimiter := True;
    SL.DelimitedText := Data.Text;

    // Process every 3 items as one entry
    for I := 0 to SL.Count - 1 do
    begin
      if (I mod 3 = 0) and (I + 2 < SL.Count) then
      begin
        LI := ListView1.Items.Add;
        LI.Caption := SL[I];         // URL
        LI.SubItems.Add(SL[I + 1]);  // Username
        LI.SubItems.Add(SL[I + 2]);  // Password
      end;
    end;
  finally
    SL.Free;
    Data.Free;
  end;
end;

procedure TForm1.FormResize(Sender: TObject);
begin
  ListView1.Repaint;
end;

end.

