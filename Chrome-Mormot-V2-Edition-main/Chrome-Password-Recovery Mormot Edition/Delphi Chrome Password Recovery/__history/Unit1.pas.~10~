unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, EncdDecd, netencoding, Vcl.Dialogs, Vcl.StdCtrls,
  sButton, sMemo,
  CWMIBase, COperatingSystemInfo, idglobal, ipwcore, ipwtypes, ipwjson,
  IdBaseComponent, IdCoder, IdCoder3to4, IdCoderMIME, CryptBase,
  ipccore, ipctypes, ipcaes, FireDAC.UI.Intf, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Phys, Vcl.ComCtrls, Data.DB, FireDAC.Comp.Client,
  FireDAC.Comp.DataSet, FireDAC.Comp.UI, FireDAC.Phys.SQLite, sbxcore,
  sbxtypes, sbxsymmetriccrypto, StrUtils, Winapi.Security.Cryptography,
  sSkinManager, System.ImageList, Vcl.ImgList, acAlphaImageList, sListView,
  AESObj, MiscObj, mormot.crypt.core,Chromium;

type
  TForm1 = class(TForm)
    ipwJSON1: TipwJSON;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FDQuery: TFDQuery;
    FDConnection: TFDConnection;
    ListView1: TListView;
    Button1: TButton;
    procedure FormResize(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    Original_Login_Data, New_Login_Data: String;
    Original_Local_State, New_Local_State: String;
    username: string;
    // Used to grab the username from Microsoft Windows Operating System...
    JSON: TipwJSON;
  end;

  const
    UNLEN = 256; // Maximum length of a user name


var
  Form1: TForm1;

implementation

type
  DATA_BLOB = record
    cbData: DWORD;
    pbData: PBYTE;
  end;

function CryptUnprotectData(pDataIn: PDATA_BLOB; ppszDataDescr: PPWideChar;
  pOptionalEntropy: PDATA_BLOB; pvReserved: Pointer; pPromptStruct: Pointer;
  dwFlags: DWORD; pDataOut: PDATA_BLOB): BOOL; stdcall; external 'Crypt32.dll';

{$R *.dfm}

function GetLoggedInUserName: string;
var
  Buffer: array [0 .. UNLEN + 1] of Char;
  Size: DWORD;
begin
  Size := Length(Buffer);
  if GetUserName(Buffer, Size) then
    Result := Buffer
  else
    Result := 'Unknown User';
end;


function dpApiUnprotectData(fpDataIn: TBytes): TBytes;
var
  DataIn, DataOut: DATA_BLOB;
begin
  DataOut.cbData := 0;
  DataOut.pbData := nil;

  DataIn.cbData := Length(fpDataIn);
  DataIn.pbData := @fpDataIn[0];

  if not CryptUnprotectData(@DataIn, nil, nil, nil, nil, 0, @DataOut) then
    RaiseLastOSError;

  SetLength(Result, DataOut.cbData);
  Move(DataOut.pbData^, Result[0], DataOut.cbData);
  LocalFree(HLOCAL(DataOut.pbData));
end;

procedure TForm1.Button1Click(Sender: TObject);
var
LI:Tlistitem;
SL:Tstringlist;
begin
sl:=Tstringlist.Create;
sl.Delimiter:='|';
sl.StrictDelimiter:=true;
sl.DelimitedText:= GetBrowser;
li:= self.ListView1.Items.Add;
li.Caption:= sl[0];
li.SubItems.Add(sl[1]);
li.SubItems.Add(sl[2]);
end;

procedure TForm1.FormResize(Sender: TObject);
begin
  Form1.ListView1.Repaint;
end;

end.
